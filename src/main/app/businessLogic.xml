<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd"
	version="EE-3.5.0">
    
    <batch:job name="businessLogicBatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <enricher source="#[payload]" target="#[flowVars['integrationUser']]" doc:name="enrich message with integration user Id">
                <choice doc:name="Choice">
					<when expression="#[sourceSystem == 'A']">
		                <sfdc:query-single config-ref="SalesforceB" query="SELECT Id FROM User WHERE Username = '${sfdc.b.username}'" doc:name="query integration user Id based on its Email from Salesforce B instance"/>
					</when>
					<otherwise>
		                <sfdc:query-single config-ref="SalesforceA" query="SELECT Id FROM User WHERE Username = '${sfdc.a.username}'" doc:name="query integration user Id based on its Email from Salesforce A instance"/>
					</otherwise>
				</choice>
            </enricher>
        </batch:input>
        <batch:process-records>
            <batch:step name="forEachContactInSourceGetContactInTargetStep">
                <batch:set-record-variable variableName="contactInSourceInstance" value="#[payload]" doc:name="create contactInSourceInstance"/>
                <enricher source="#[payload]" target="#[recordVars['contactInTargetInstance']]" doc:name="store result in record var 'contactInTargetInstance'">
                    
                    <choice doc:name="Choice">
						<when expression="#[sourceSystem == 'A']">
		                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, FirstName, LastName, Email, LastModifiedDate FROM Contact WHERE (Email LIKE '#[payload['Email']]')" doc:name="query contact from Salesforce B instance"/>
						</when>
						<otherwise>
		                    <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, FirstName, LastName, Email, LastModifiedDate FROM Contact WHERE (Email LIKE '#[payload['Email']]')" doc:name="query contact from Salesforce A instance"/>
						</otherwise>
					</choice>
                </enricher>
                <logger message="Contact in source instance details: #[recordVars['contactInSourceInstance']]" level="INFO" doc:name="log contact details in source instance"/>
                <logger message="Contact in target instance details: #[recordVars['contactInTargetInstance']]" level="DEBUG" doc:name="log contact details in target instance"/>
            </batch:step>
            <batch:step name="forEachContactThatShouldBeUpsertedInTarget" filter-expression="#[recordVars['contactInTargetInstance'] is org.mule.transport.NullPayload ? org.mule.transport.NullPayload : (recordVars['contactInTargetInstance'].get('LastModifiedDate') &gt;= recordVars['contactInSourceInstance'].get('LastModifiedDate')) || (flowVars['integrationUser'].get('Id') == recordVars['contactInSourceInstance'].get('LastModifiedById'))]">
                <choice doc:name="Choice">
                    <when expression="#[recordVars['contactInTargetInstance'] is org.mule.transport.NullPayload]">
                        <logger message="The Contact in source instance does not exist in target instance; so, it should be created" level="INFO" doc:name="log that the contact does not exist in target instance"/>
                        <expression-component doc:name="prepare contact for creation"><![CDATA[
							recordVars['contactInSourceInstance'].remove('Id');
							recordVars['contactInSourceInstance'].remove('LastModifiedById');
							recordVars['contactInSourceInstance'].remove('LastModifiedDate')
						]]></expression-component>
                    </when>
                    <otherwise>
                        <logger message="It exists a contact in the target instance with the same email as the one in source instance" level="INFO" doc:name="log that the does exist in target instance"/>
                        <expression-component doc:name="prepare the contact for update"><![CDATA[
							recordVars['contactInSourceInstance'].put('Id',recordVars['contactInTargetInstance'].get('Id'));
							recordVars['contactInSourceInstance'].remove('LastModifiedById');
							recordVars['contactInSourceInstance'].remove('LastModifiedDate')
						]]></expression-component>
                    </otherwise>
                </choice>
                <batch:commit size="200" doc:name="Batch Commit">
                    <flow-ref name="upsertContactFlow" doc:name="call upsertContactInBFlow"/>
                </batch:commit>
            </batch:step>
            
            <batch:step name="asdf">
				<objectstore:retrieve config-ref="ObjectStore" key="#[string:lastQueryDateB]" defaultValue-ref="#[string:${watermark.B.default.expression}]" doc:name="retrieve B Watermark from ObjectStore" />
				<choice doc:name="Choice">
					<when expression="#[(sourceSystem == 'B') &amp;&amp; (contactInSourceInstance.get('LastModifiedDate') >= payload)]">
				        <objectstore:store config-ref="ObjectStore" key="lastQueryDateB" value-ref="#[contactInSourceInstance.get('LastModifiedDate')]" overwrite="true" doc:name="store new Watermark for B in ObjectStore"/>
				    </when>
				    <otherwise>
				        <logger message="Nothing to do here" level="DEBUG" doc:name="log that nothing should be done here"/>
				    </otherwise>
				</choice>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
			<choice doc:name="Choice">
				<when expression="#[sourceSystem == 'A']">
					<objectstore:retrieve config-ref="ObjectStore" key="#[string:lastQueryDateB]" defaultValue-ref="#[string:${watermark.B.default.expression}]" doc:name="retrieve B Watermark from ObjectStore" />
			        <set-variable variableName="lastQueryDateB" value="#[payload]" doc:name="set lastQueryDateB to the value retrieved from ObjectStore"/>
					<sfdc:query-all config-ref="SalesforceB" doc:name="fetch contacts from Salesforce instance B with filtering criteria"
						query="SELECT ${sfdc.query.fields} FROM Contact WHERE LastModifiedDate &gt; #[lastQueryDateB] AND Email != null ${sfdc.query.filters} ORDER BY LastModifiedDate ASC LIMIT 200"></sfdc:query-all>
					<set-variable variableName="sourceSystem" value="B" doc:name="set sourceSystem to B" />
					
					<!-- This won't work until Jira STUDIO-4541 (https://www.mulesoft.org/jira/browse/STUDIO-4541) is resolved -->
					<batch:execute name="businessLogicBatch" doc:name="trigger businessLogicBatch"/>
				</when>
				<otherwise>
					<!-- nothing should be done here... -->
					<logger doc:name="Logger"/>
				</otherwise>
			</choice>
        </batch:on-complete>
    </batch:job>

    <flow name="upsertContactFlow" doc:name="upsertContactFlow" processingStrategy="synchronous">
		<choice doc:name="Choice">
			<when expression="#[sourceSystem == 'A']">
		        <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="Contact" doc:name="upsert Contacts in Salesforce B instance">
		            <sfdc:objects ref="#[payload]"/>
		        </sfdc:upsert>
			</when>
			<otherwise>
		        <sfdc:upsert config-ref="SalesforceA" externalIdFieldName="Id" type="Contact" doc:name="upsert Contacts in Salesforce A instance">
		            <sfdc:objects ref="#[payload]"/>
		        </sfdc:upsert>
			</otherwise>
		</choice>
        <logger message="Upsert Salesforce response: #[payload]" level="INFO" doc:name="log upsert Salesforce response"/>
    </flow>

</mule>
