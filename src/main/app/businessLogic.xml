<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd"
	version="EE-3.5.0">
    
    <batch:job name="fromAToBBatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
			<poll doc:name="Poll">
				<fixed-frequency-scheduler frequency="${polling.frequency}" startDelay="10000" />
				<watermark variable="lastQueryDateA" default-expression="${watermark.default.expression}" selector="MAX" selector-expression="#[payload.LastModifiedDate]" />
				<sfdc:query config-ref="SalesforceA" doc:name="fetch contacts from A with filtering criteria" query="dsql:SELECT AssistantName,AssistantPhone,Birthdate,Department,Description,Email,EmailBouncedDate,EmailBouncedReason,Fax,FirstName,HomePhone,Jigsaw,LastActivityDate,LastCURequestDate,LastCUUpdateDate,LastModifiedById,LastModifiedDate,LastName,LeadSource,MailingCity,MailingCountry,MailingState,MobilePhone,OtherCity,OtherCountry,OtherLatitude,OtherLongitude,OtherPhone,OtherPostalCode,OtherState,OtherStreet,Phone,Salutation,Title FROM Contact WHERE (LastModifiedDate &gt; #[flowVars['lastQueryDateA']] AND Email &lt;&gt; null) ORDER BY LastModifiedDate ASC LIMIT 200"></sfdc:query>
			</poll>
            <enricher source="#[payload]" target="#[flowVars['integrationUser']]" doc:name="store integration user id">
	            <sfdc:query-single config-ref="SalesforceB" query="SELECT Id FROM User WHERE Username = '${sfdc.b.username}'" doc:name="query integration user id from B" />
            </enricher>
        </batch:input>
        <batch:process-records>
            <batch:step name="forEachContactInAGetContactInBStep">
                <batch:set-record-variable variableName="contactInSourceInstance" value="#[payload]" doc:name="store contact in source instance"/>
                <enricher source="#[payload]" target="#[recordVars['contactInTargetInstance']]" doc:name="store contact in target instance">
	                <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, FirstName, LastName, Email, LastModifiedDate FROM Contact WHERE (Email LIKE '#[payload['Email']]')" doc:name="query contact from B instance"/>
                </enricher>
            </batch:step>
            <batch:step name="forEachContactThatShouldBeUpsertedInB" filter-expression="#[recordVars['contactInTargetInstance'] is NullPayload ? false : (recordVars['contactInTargetInstance'].get('LastModifiedDate') &gt;= recordVars['contactInSourceInstance'].get('LastModifiedDate')) || (flowVars['integrationUser'].get('Id') == recordVars['contactInSourceInstance'].get('LastModifiedById'))]">
				<expression-component doc:name="prepare contact for upsert"><![CDATA[
					if(recordVars['contactInTargetInstance'] is org.mule.transport.NullPayload) {
						recordVars['contactInSourceInstance'].remove('Id');
						recordVars['contactInSourceInstance'].remove('LastModifiedById');
						recordVars['contactInSourceInstance'].remove('LastModifiedDate');
					} else {
						recordVars['contactInSourceInstance'].put('Id',recordVars['contactInTargetInstance'].get('Id'));
						recordVars['contactInSourceInstance'].remove('LastModifiedById');
						recordVars['contactInSourceInstance'].remove('LastModifiedDate');
					}
				]]></expression-component>
                <batch:commit size="200" doc:name="Batch Commit">
			        <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="Contact" doc:name="upsert contacts in B">
			            <sfdc:objects ref="#[payload]"/>
			        </sfdc:upsert>
			        <logger message="Upsert Salesforce response: #[payload]" level="INFO" doc:name="log response"/>
                </batch:commit>
            </batch:step>
        </batch:process-records>
    </batch:job>
    
    <batch:job name="fromBToABatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
			<poll doc:name="Poll">
				<fixed-frequency-scheduler frequency="${polling.frequency}" startDelay="10000" />
				<watermark variable="lastQueryDateB" default-expression="${watermark.default.expression}" selector="MAX" selector-expression="#[payload.LastModifiedDate]" />
				<sfdc:query config-ref="SalesforceB" doc:name="fetch contacts from B with filtering criteria"
					query="dsql:SELECT AssistantName,AssistantPhone,Birthdate,Department,Description,Email,EmailBouncedDate,EmailBouncedReason,Fax,FirstName,HomePhone,Jigsaw,LastActivityDate,LastCURequestDate,LastCUUpdateDate,LastModifiedById,LastModifiedDate,LastName,LeadSource,MailingCity,MailingCountry,MailingState,MobilePhone,OtherCity,OtherCountry,OtherLatitude,OtherLongitude,OtherPhone,OtherPostalCode,OtherState,OtherStreet,Phone,Salutation,Title FROM Contact WHERE (LastModifiedDate &gt; #[flowVars['lastQueryDateB']] AND Email &lt;&gt; null) ORDER BY LastModifiedDate ASC LIMIT 200"></sfdc:query>
			</poll>
            <enricher source="#[payload]" target="#[flowVars['integrationUser']]" doc:name="store integration user id">
	            <sfdc:query-single config-ref="SalesforceA" query="SELECT Id FROM User WHERE Username = '${sfdc.a.username}'" doc:name="query integration user id from A"/>
            </enricher>
        </batch:input>
        <batch:process-records>
            <batch:step name="forEachContactInBGetContactInAStep">
                <batch:set-record-variable variableName="contactInSourceInstance" value="#[payload]" doc:name="store contact in source instance"/>
                <enricher source="#[payload]" target="#[recordVars['contactInTargetInstance']]" doc:name="store contact in source instance">
		            <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, FirstName, LastName, Email, LastModifiedDate FROM Contact WHERE (Email LIKE '#[payload['Email']]')" doc:name="query contact from Salesforce A instance"/>
                </enricher>
            </batch:step>
            <batch:step name="forEachContactThatShouldBeUpsertedInA" filter-expression="#[recordVars['contactInTargetInstance'] is NullPayload ? false : (recordVars['contactInTargetInstance'].get('LastModifiedDate') &gt;= recordVars['contactInSourceInstance'].get('LastModifiedDate')) || (flowVars['integrationUser'].get('Id') == recordVars['contactInSourceInstance'].get('LastModifiedById'))]">
				<expression-component doc:name="prepare contact for upsert"><![CDATA[
					if(recordVars['contactInTargetInstance'] is org.mule.transport.NullPayload) {
						recordVars['contactInSourceInstance'].remove('Id');
						recordVars['contactInSourceInstance'].remove('LastModifiedById');
						recordVars['contactInSourceInstance'].remove('LastModifiedDate');
					} else {
						recordVars['contactInSourceInstance'].put('Id',recordVars['contactInTargetInstance'].get('Id'));
						recordVars['contactInSourceInstance'].remove('LastModifiedById');
						recordVars['contactInSourceInstance'].remove('LastModifiedDate');
					}
				]]></expression-component>
                <batch:commit size="200" doc:name="Batch Commit">
			        <sfdc:upsert config-ref="SalesforceA" externalIdFieldName="Id" type="Contact" doc:name="upsert contact in A">
			            <sfdc:objects ref="#[payload]"/>
			        </sfdc:upsert>
			        <logger message="Upsert Salesforce response: #[payload]" level="INFO" doc:name="log response"/>
                </batch:commit>
            </batch:step>
        </batch:process-records>
    </batch:job>


</mule>
