<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd"
	version="EE-3.5.0">
    
    <batch:job name="syncBatchA" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
        	
        	<!-- Steps to synchronize data from A to B -->
        	
            <batch:step name="forEachContactInAGetContactInBStep" >
                <enricher source="#[payload]" target="#[recordVars['contactInTargetInstance']]" doc:name="store contact in target instance">
	                <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, FirstName, LastName, Email, LastModifiedDate FROM Contact WHERE (Email LIKE '#[payload['Email']]')" doc:name="query contact from B instance"/>
                </enricher>
            </batch:step>
            <batch:step name="findOrCreateAccountInBSetp" accept-expression="'syncAccount' == '${account.sync.policy}'">
                <enricher source="#[payload]" target="#[recordVars['accountInTargetInstance']]" doc:name="store account in target instance">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, Name FROM Account WHERE Name = '#[payload['Account']['Name']]'" doc:name="query account in B instance"/>
                </enricher>
                <choice doc:name="Choice">
                    <when expression="#[recordVars['accountInTargetInstance'] is NullPayload]">
                        <enricher doc:name="store id of account in target instance" target="#[recordVars['idOfAccountInTargetInstance']]" source="#[payload]">
	                        <processor-chain doc:name="Processor Chain">
                                <expression-component doc:name="prepare account for creation"><![CDATA[payload['Account'].remove('Id');
payload['Account'].put('NumberOfEmployees', payload['Account']['NumberOfEmployees'] == null ? 0 :  Integer.parseInt(payload['Account']['NumberOfEmployees']));]]></expression-component>
                                <set-payload value="#[ [payload['Account']]]" doc:name="set payload with account to be created"/>
       		                     <sfdc:create config-ref="SalesforceB" type="Account" doc:name="create account in B instance">
       	    	                     <sfdc:objects ref="#[payload]"/>
       	        	             </sfdc:create>
                                <expression-transformer expression="#[payload[0].getId()]" doc:name="get the id of the account created"/>
	                        </processor-chain>
                        </enricher>
                    </when>
                    <otherwise>
                        <enricher target="#[recordVars['idOfAccountInTargetInstance']]" doc:name="store id of account in B" source="#[payload]">
     	                   <expression-transformer expression="#[recordVars['accountInTargetInstance']['Id']]" doc:name="get the id of the account in target"/>
                        </enricher>
                    </otherwise>
                </choice>
                <expression-component doc:name="set contact's parent account id"><![CDATA[payload.put('AccountId', recordVars['idOfAccountInTargetInstance']);]]></expression-component>
            </batch:step>
            <batch:step name="setDummyAccountIdForBStep" accept-expression="'assignDummyAccount' == '${account.sync.policy}'">
                <expression-component doc:name="set contact's parent account id"><![CDATA[payload.put('AccountId', '${account.id.in.b}');]]></expression-component>
            </batch:step>
            <batch:step name="forEachContactThatShouldBeUpsertedInB" accept-expression="(recordVars['contactInTargetInstance'] is NullPayload || recordVars['contactInTargetInstance'].get('LastModifiedDate') &lt; payload.get('LastModifiedDate') &amp;&amp; '${sfdc.a.integration.user.id}' != payload.get('LastModifiedById'))">
				<expression-component doc:name="prepare contact for upsert"><![CDATA[payload.remove('LastModifiedDate');
payload.remove('LastModifiedById');
payload.remove('Account');

if(recordVars['contactInTargetInstance'] is org.mule.transport.NullPayload) {
	payload.remove('Id');
} else {
	payload.put('Id', recordVars['contactInTargetInstance'].get('Id'));	
}]]></expression-component>
                <batch:commit size="200" doc:name="Batch Commit">
			        <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="Contact" doc:name="upsert contacts in B">
			            <sfdc:objects ref="#[payload]"/>
			        </sfdc:upsert>
			        <logger message="Upsert Salesforce response: #[payload]" level="INFO" doc:name="log response"/>
                </batch:commit>
            </batch:step>


        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="unlock processing"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>	
    </batch:job>
    <batch:job name="syncBatchB" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>

            
			<!-- Steps to synchronize data from B to A -->
			            
            <batch:step name="forEachContactInBGetContactInAStep" >
                <enricher source="#[payload]" target="#[recordVars['contactInTargetInstance']]" doc:name="store contact in target instance">
	                <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, FirstName, LastName, Email, LastModifiedDate FROM Contact WHERE (Email LIKE '#[payload['Email']]')" doc:name="query contact from A instance"/>
                </enricher>
            </batch:step>
            <batch:step name="findOrCreateAccountInASetp" accept-expression="'syncAccount' == '${account.sync.policy}'">
                <enricher source="#[payload]" target="#[recordVars['accountInTargetInstance']]" doc:name="store account in target instance">
                    <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, Name FROM Account WHERE Name = '#[payload['Account']['Name']]'" doc:name="query account in A instance"/>
                </enricher>
                <choice doc:name="Choice">
                    <when expression="#[recordVars['accountInTargetInstance'] is NullPayload]">
                        <enricher doc:name="store id of account in target instance" target="#[recordVars['idOfAccountInTargetInstance']]" source="#[payload]">
	                        <processor-chain doc:name="Processor Chain">
                                <expression-component doc:name="prepare account for creation"><![CDATA[payload['Account'].remove('Id');
payload['Account'].put('NumberOfEmployees', payload['Account']['NumberOfEmployees'] == null ? 0 :  Integer.parseInt(payload['Account']['NumberOfEmployees']));]]></expression-component>
                                <set-payload value="#[ [payload['Account']]]" doc:name="set payload with account to be created"/>
       		                     <sfdc:create config-ref="SalesforceA" type="Account" doc:name="create account in A instance">
       	    	                     <sfdc:objects ref="#[payload]"/>
       	        	             </sfdc:create>
                                <expression-transformer expression="#[payload[0].getId()]" doc:name="get the id of the account created"/>
	                        </processor-chain>
                        </enricher>
                    </when>
                    <otherwise>
                        <enricher target="#[recordVars['idOfAccountInTargetInstance']]" doc:name="store id of account in A" source="#[payload]">
     	                   <expression-transformer expression="#[recordVars['accountInTargetInstance']['Id']]" doc:name="get the id of the account in target"/>
                        </enricher>
                    </otherwise>
                </choice>
                <expression-component doc:name="set contact's parent account id"><![CDATA[payload.put('AccountId', recordVars['idOfAccountInTargetInstance']);]]></expression-component>
            </batch:step>
            <batch:step name="setDummyAccountIdForAStep" accept-expression=" 'assignDummyAccount' == '${account.sync.policy}'">
                <expression-component doc:name="set contact's parent account id"><![CDATA[payload.put('AccountId', '${account.id.in.a}');]]></expression-component>
            </batch:step>
            <batch:step name="forEachContactThatShouldBeUpsertedInA" accept-expression=" (recordVars['contactInTargetInstance'] is NullPayload || recordVars['contactInTargetInstance'].get('LastModifiedDate') &lt; payload.get('LastModifiedDate') &amp;&amp; '${sfdc.b.integration.user.id}' != payload.get('LastModifiedById'))">
				<expression-component doc:name="prepare contact for upsert"><![CDATA[payload.remove('LastModifiedDate');
payload.remove('LastModifiedById');
payload.remove('Account');

if(recordVars['contactInTargetInstance'] is org.mule.transport.NullPayload) {
	payload.remove('Id');
} else {
	payload.put('Id', recordVars['contactInTargetInstance'].get('Id'));	
}]]></expression-component>
                <batch:commit size="200" doc:name="Batch Commit">
			        <sfdc:upsert config-ref="SalesforceA" externalIdFieldName="Id" type="Contact" doc:name="upsert contacts in A">
			            <sfdc:objects ref="#[payload]"/>
			        </sfdc:upsert>
			        <logger message="Upsert Salesforce response: #[payload]" level="INFO" doc:name="log response"/>
                </batch:commit>
            </batch:step>            
        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="unlock processing"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>
    </batch:job>
    
</mule>
